#version 450

layout(local_size_x = 8, local_size_y = 8) in;
layout(binding = 0) uniform sampler2DArray img_input;
layout(r32f, binding = 1) uniform image2DArray img_output;

layout(push_constant) uniform PushConst {
    uint verticalPassFlag;
    uint array_layer;
    uint kernel_size;
    float kernel[20]; // [coeff1, offset1, coeff2, offset2, ...]
} push_const;

void main() {
    uint image_width = textureSize(img_input,0).x;
    uint image_height = textureSize(img_input,0).y;

    // Set input image coordinate to texel coordinate = unnormalized (gl_GlobalInvocationID.x,gl_GlobalInvocationID.y)
    vec3 coords_in = vec3((float(gl_GlobalInvocationID.x)+0.5)/float(image_width), (float(gl_GlobalInvocationID.y)+0.5)/float(image_height),0);

    if(gl_GlobalInvocationID.x < image_width && gl_GlobalInvocationID.y < image_height) {
        
        if(push_const.verticalPassFlag==0) {
            coords_in.z = float(push_const.array_layer);
        }

        ivec3 coords_out = ivec3(ivec2(gl_GlobalInvocationID),0);
        if(push_const.verticalPassFlag==1) {
            coords_out.z = int(push_const.array_layer);
        }

        float rpix = textureLod(img_input, coords_in,0).r * push_const.kernel[0];
        if(push_const.verticalPassFlag==0) {
            for(int i=2; i<push_const.kernel_size;i+=2) {
                vec3 offset = vec3(push_const.kernel[i+1]/float(image_width), 0, 0);
                rpix += (textureLod(img_input, coords_in + offset,0).r + textureLod(img_input, coords_in - offset,0).r) * push_const.kernel[i];
            }
        }
        else if(push_const.verticalPassFlag==1) {
            for(int i=2; i<push_const.kernel_size;i+=2) {
                vec3 offset = vec3(0, push_const.kernel[i+1]/float(image_height), 0);
                rpix += (textureLod(img_input, coords_in + offset,0).r +textureLod(img_input, coords_in - offset,0).r) * push_const.kernel[i];
            }
        }
        imageStore(img_output, coords_out, vec4(rpix, 0.f, 0.f, 1.f));
    }
}